// This file is auto-generated by @hey-api/openapi-ts

import type {
  AuthControllerSignInResponse,
  AdmintorsControllerAddOneResponse,
  AdmintorsControllerFindByIdResponse,
  AdmintorsControllerGetPageListResponse,
  RolesControllerAddOneResponse,
  RolesControllerFindByIdResponse,
  RolesControllerGetPageListResponse,
  MenusControllerAddOneResponse,
  MenusControllerFindByIdResponse,
  MenusControllerGetTreeDataResponse,
  MenusControllerGetAllMenusResponse,
} from './types.gen';

const admintorsResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

const loginSuccessResultDtoSchemaResponseTransformer = (data: any) => {
  data.access_token = admintorsResultDtoSchemaResponseTransformer(
    data.access_token,
  );
  data.userInfo = admintorsResultDtoSchemaResponseTransformer(data.userInfo);
  return data;
};

export const authControllerSignInResponseTransformer = async (
  data: any,
): Promise<AuthControllerSignInResponse> => {
  data = loginSuccessResultDtoSchemaResponseTransformer(data);
  return data;
};

export const admintorsControllerAddOneResponseTransformer = async (
  data: any,
): Promise<AdmintorsControllerAddOneResponse> => {
  data = admintorsResultDtoSchemaResponseTransformer(data);
  return data;
};

export const admintorsControllerFindByIdResponseTransformer = async (
  data: any,
): Promise<AdmintorsControllerFindByIdResponse> => {
  data = admintorsResultDtoSchemaResponseTransformer(data);
  return data;
};

const admintorPaginationResultDtoSchemaResponseTransformer = (data: any) => {
  data.list = data.list.map((item: any) => {
    return admintorsResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const admintorsControllerGetPageListResponseTransformer = async (
  data: any,
): Promise<AdmintorsControllerGetPageListResponse> => {
  data = admintorPaginationResultDtoSchemaResponseTransformer(data);
  return data;
};

const rolesResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

export const rolesControllerAddOneResponseTransformer = async (
  data: any,
): Promise<RolesControllerAddOneResponse> => {
  data = rolesResultDtoSchemaResponseTransformer(data);
  return data;
};

export const rolesControllerFindByIdResponseTransformer = async (
  data: any,
): Promise<RolesControllerFindByIdResponse> => {
  data = rolesResultDtoSchemaResponseTransformer(data);
  return data;
};

const roleQueryPaginationResultDtoSchemaResponseTransformer = (data: any) => {
  data.list = data.list.map((item: any) => {
    return rolesResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const rolesControllerGetPageListResponseTransformer = async (
  data: any,
): Promise<RolesControllerGetPageListResponse> => {
  data = roleQueryPaginationResultDtoSchemaResponseTransformer(data);
  return data;
};

const menusResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

export const menusControllerAddOneResponseTransformer = async (
  data: any,
): Promise<MenusControllerAddOneResponse> => {
  data = menusResultDtoSchemaResponseTransformer(data);
  return data;
};

export const menusControllerFindByIdResponseTransformer = async (
  data: any,
): Promise<MenusControllerFindByIdResponse> => {
  data = menusResultDtoSchemaResponseTransformer(data);
  return data;
};

const treeMenuDataDtoSchemaResponseTransformer = (data: any) => {
  if (data.deletedTime) {
    data.deletedTime = new Date(data.deletedTime);
  }
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  data.children = data.children.map((item: any) => {
    return treeMenuDataDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const menusControllerGetTreeDataResponseTransformer = async (
  data: any,
): Promise<MenusControllerGetTreeDataResponse> => {
  data = data.map((item: any) => {
    return treeMenuDataDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const menusControllerGetAllMenusResponseTransformer = async (
  data: any,
): Promise<MenusControllerGetAllMenusResponse> => {
  data = data.map((item: any) => {
    return menusResultDtoSchemaResponseTransformer(item);
  });
  return data;
};
