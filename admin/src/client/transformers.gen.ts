// This file is auto-generated by @hey-api/openapi-ts

import type {
  AuthControllerSignInResponse,
  AdmintorsControllerAddOneResponse,
  AdmintorsControllerFindByIdResponse,
  AdmintorsControllerGetPageListResponse,
  RolesControllerAddOneResponse,
  RolesControllerFindByIdResponse,
  RolesControllerGetPageListResponse,
  RolesControllerGetAllResponse,
  MenusControllerAddOneResponse,
  MenusControllerFindByIdResponse,
  MenusControllerGetTreeDataResponse,
  MenusControllerGetAllByFilterResponse,
  FilesControllerGetPaginationListResponse,
  DepartmentsControllerAddOneResponse,
  DepartmentsControllerFindByIdResponse,
  DepartmentsControllerGetTreeDataResponse,
  DepartmentsControllerGetAllByFilterResponse,
  ProjectClassificationsControllerAddOneResponse,
  ProjectClassificationsControllerFindByIdResponse,
  ProjectClassificationsControllerGetTreeDataResponse,
  ProjectClassificationsControllerGetAllByFilterResponse,
} from './types.gen';

const admintorsResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

const loginSuccessResultDtoSchemaResponseTransformer = (data: any) => {
  data.userInfo = admintorsResultDtoSchemaResponseTransformer(data.userInfo);
  return data;
};

export const authControllerSignInResponseTransformer = async (
  data: any,
): Promise<AuthControllerSignInResponse> => {
  data = loginSuccessResultDtoSchemaResponseTransformer(data);
  return data;
};

export const admintorsControllerAddOneResponseTransformer = async (
  data: any,
): Promise<AdmintorsControllerAddOneResponse> => {
  data = admintorsResultDtoSchemaResponseTransformer(data);
  return data;
};

export const admintorsControllerFindByIdResponseTransformer = async (
  data: any,
): Promise<AdmintorsControllerFindByIdResponse> => {
  data = admintorsResultDtoSchemaResponseTransformer(data);
  return data;
};

const rolesResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

const admintorsPageItemDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  data.roles = data.roles.map((item: any) => {
    return rolesResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

const admintorPaginationResultDtoSchemaResponseTransformer = (data: any) => {
  data.list = data.list.map((item: any) => {
    return admintorsPageItemDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const admintorsControllerGetPageListResponseTransformer = async (
  data: any,
): Promise<AdmintorsControllerGetPageListResponse> => {
  data = admintorPaginationResultDtoSchemaResponseTransformer(data);
  return data;
};

export const rolesControllerAddOneResponseTransformer = async (
  data: any,
): Promise<RolesControllerAddOneResponse> => {
  data = rolesResultDtoSchemaResponseTransformer(data);
  return data;
};

export const rolesControllerFindByIdResponseTransformer = async (
  data: any,
): Promise<RolesControllerFindByIdResponse> => {
  data = rolesResultDtoSchemaResponseTransformer(data);
  return data;
};

const roleQueryPaginationResultDtoSchemaResponseTransformer = (data: any) => {
  data.list = data.list.map((item: any) => {
    return rolesResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const rolesControllerGetPageListResponseTransformer = async (
  data: any,
): Promise<RolesControllerGetPageListResponse> => {
  data = roleQueryPaginationResultDtoSchemaResponseTransformer(data);
  return data;
};

export const rolesControllerGetAllResponseTransformer = async (
  data: any,
): Promise<RolesControllerGetAllResponse> => {
  data = data.map((item: any) => {
    return rolesResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

const menusResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

export const menusControllerAddOneResponseTransformer = async (
  data: any,
): Promise<MenusControllerAddOneResponse> => {
  data = menusResultDtoSchemaResponseTransformer(data);
  return data;
};

export const menusControllerFindByIdResponseTransformer = async (
  data: any,
): Promise<MenusControllerFindByIdResponse> => {
  data = menusResultDtoSchemaResponseTransformer(data);
  return data;
};

const treeMenuDataDtoSchemaResponseTransformer = (data: any) => {
  if (data.deletedTime) {
    data.deletedTime = new Date(data.deletedTime);
  }
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  data.children = data.children.map((item: any) => {
    return treeMenuDataDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const menusControllerGetTreeDataResponseTransformer = async (
  data: any,
): Promise<MenusControllerGetTreeDataResponse> => {
  data = data.map((item: any) => {
    return treeMenuDataDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const menusControllerGetAllByFilterResponseTransformer = async (
  data: any,
): Promise<MenusControllerGetAllByFilterResponse> => {
  data = data.map((item: any) => {
    return menusResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

const filesResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

const filesPaginationResultDtoSchemaResponseTransformer = (data: any) => {
  data.list = data.list.map((item: any) => {
    return filesResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const filesControllerGetPaginationListResponseTransformer = async (
  data: any,
): Promise<FilesControllerGetPaginationListResponse> => {
  data = filesPaginationResultDtoSchemaResponseTransformer(data);
  return data;
};

const departmentsResultDtoSchemaResponseTransformer = (data: any) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

export const departmentsControllerAddOneResponseTransformer = async (
  data: any,
): Promise<DepartmentsControllerAddOneResponse> => {
  data = departmentsResultDtoSchemaResponseTransformer(data);
  return data;
};

export const departmentsControllerFindByIdResponseTransformer = async (
  data: any,
): Promise<DepartmentsControllerFindByIdResponse> => {
  data = departmentsResultDtoSchemaResponseTransformer(data);
  return data;
};

const treeDepartmentsDataDtoSchemaResponseTransformer = (data: any) => {
  if (data.deletedTime) {
    data.deletedTime = new Date(data.deletedTime);
  }
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  data.children = data.children.map((item: any) => {
    return treeDepartmentsDataDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const departmentsControllerGetTreeDataResponseTransformer = async (
  data: any,
): Promise<DepartmentsControllerGetTreeDataResponse> => {
  data = data.map((item: any) => {
    return treeDepartmentsDataDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const departmentsControllerGetAllByFilterResponseTransformer = async (
  data: any,
): Promise<DepartmentsControllerGetAllByFilterResponse> => {
  data = data.map((item: any) => {
    return departmentsResultDtoSchemaResponseTransformer(item);
  });
  return data;
};

const projectClassificationsResultDtoSchemaResponseTransformer = (
  data: any,
) => {
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  return data;
};

export const projectClassificationsControllerAddOneResponseTransformer = async (
  data: any,
): Promise<ProjectClassificationsControllerAddOneResponse> => {
  data = projectClassificationsResultDtoSchemaResponseTransformer(data);
  return data;
};

export const projectClassificationsControllerFindByIdResponseTransformer =
  async (
    data: any,
  ): Promise<ProjectClassificationsControllerFindByIdResponse> => {
    data = projectClassificationsResultDtoSchemaResponseTransformer(data);
    return data;
  };

const projectClassificationsTreeDtoSchemaResponseTransformer = (data: any) => {
  if (data.deletedTime) {
    data.deletedTime = new Date(data.deletedTime);
  }
  data.createdTime = new Date(data.createdTime);
  data.updatedTime = new Date(data.updatedTime);
  data.children = data.children.map((item: any) => {
    return projectClassificationsTreeDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const projectClassificationsControllerGetTreeDataResponseTransformer =
  async (
    data: any,
  ): Promise<ProjectClassificationsControllerGetTreeDataResponse> => {
    data = data.map((item: any) => {
      return projectClassificationsTreeDtoSchemaResponseTransformer(item);
    });
    return data;
  };

export const projectClassificationsControllerGetAllByFilterResponseTransformer =
  async (
    data: any,
  ): Promise<ProjectClassificationsControllerGetAllByFilterResponse> => {
    data = data.map((item: any) => {
      return projectClassificationsResultDtoSchemaResponseTransformer(item);
    });
    return data;
  };
