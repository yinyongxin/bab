// This file is auto-generated by @hey-api/openapi-ts

import type { AuthControllerSignInResponse, AdmintorsControllerAddOneResponse, AdmintorsControllerFindByIdResponse, AdmintorsControllerFindAllByFieldsResponse, AdmintorsControllerGetPageListResponse, RolesControllerAddOneResponse, RolesControllerFindByIdResponse, RolesControllerFindAllByFieldsResponse, RolesControllerGetPageListResponse, MenusControllerAddOneResponse, MenusControllerFindByIdResponse, MenusControllerGetTreeDataResponse, MenusControllerGetAllMenusResponse } from './types.gen';

const resultAdmintorDtoSchemaResponseTransformer = (data: any) => {
    data.createdTime = new Date(data.createdTime);
    data.updatedTime = new Date(data.updatedTime);
    return data;
};

export const authControllerSignInResponseTransformer = async (data: any): Promise<AuthControllerSignInResponse> => {
    data = resultAdmintorDtoSchemaResponseTransformer(data);
    return data;
};

export const admintorsControllerAddOneResponseTransformer = async (data: any): Promise<AdmintorsControllerAddOneResponse> => {
    data = resultAdmintorDtoSchemaResponseTransformer(data);
    return data;
};

export const admintorsControllerFindByIdResponseTransformer = async (data: any): Promise<AdmintorsControllerFindByIdResponse> => {
    data = resultAdmintorDtoSchemaResponseTransformer(data);
    return data;
};

export const admintorsControllerFindAllByFieldsResponseTransformer = async (data: any): Promise<AdmintorsControllerFindAllByFieldsResponse> => {
    data = data.map((item: any) => {
        return resultAdmintorDtoSchemaResponseTransformer(item);
    });
    return data;
};

const admintorPaginationQueryResultDtoSchemaResponseTransformer = (data: any) => {
    data.list = data.list.map((item: any) => {
        return resultAdmintorDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const admintorsControllerGetPageListResponseTransformer = async (data: any): Promise<AdmintorsControllerGetPageListResponse> => {
    data = admintorPaginationQueryResultDtoSchemaResponseTransformer(data);
    return data;
};

const resultRoleDtoSchemaResponseTransformer = (data: any) => {
    data.createdTime = new Date(data.createdTime);
    data.updatedTime = new Date(data.updatedTime);
    return data;
};

export const rolesControllerAddOneResponseTransformer = async (data: any): Promise<RolesControllerAddOneResponse> => {
    data = resultRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const rolesControllerFindByIdResponseTransformer = async (data: any): Promise<RolesControllerFindByIdResponse> => {
    data = resultRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const rolesControllerFindAllByFieldsResponseTransformer = async (data: any): Promise<RolesControllerFindAllByFieldsResponse> => {
    data = data.map((item: any) => {
        return resultRoleDtoSchemaResponseTransformer(item);
    });
    return data;
};

const rolePaginationQueryResultDtoSchemaResponseTransformer = (data: any) => {
    data.list = data.list.map((item: any) => {
        return resultRoleDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const rolesControllerGetPageListResponseTransformer = async (data: any): Promise<RolesControllerGetPageListResponse> => {
    data = rolePaginationQueryResultDtoSchemaResponseTransformer(data);
    return data;
};

const resultMenuDtoSchemaResponseTransformer = (data: any) => {
    data.createdTime = new Date(data.createdTime);
    data.updatedTime = new Date(data.updatedTime);
    return data;
};

export const menusControllerAddOneResponseTransformer = async (data: any): Promise<MenusControllerAddOneResponse> => {
    data = resultMenuDtoSchemaResponseTransformer(data);
    return data;
};

export const menusControllerFindByIdResponseTransformer = async (data: any): Promise<MenusControllerFindByIdResponse> => {
    data = resultMenuDtoSchemaResponseTransformer(data);
    return data;
};

const treeMenuDataDtoSchemaResponseTransformer = (data: any) => {
    if (data.deletedTime) {
        data.deletedTime = new Date(data.deletedTime);
    }
    data.createdTime = new Date(data.createdTime);
    data.updatedTime = new Date(data.updatedTime);
    data.children = data.children.map((item: any) => {
        return treeMenuDataDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const menusControllerGetTreeDataResponseTransformer = async (data: any): Promise<MenusControllerGetTreeDataResponse> => {
    data = data.map((item: any) => {
        return treeMenuDataDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const menusControllerGetAllMenusResponseTransformer = async (data: any): Promise<MenusControllerGetAllMenusResponse> => {
    data = data.map((item: any) => {
        return treeMenuDataDtoSchemaResponseTransformer(item);
    });
    return data;
};